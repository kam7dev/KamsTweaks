name: Java CI with Gradle

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'nightly'
        type: choice
        options:
          - release
          - nightly
  push:
    branches:
      - "**"
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs


  nightly:
    name: Create Nightly Release
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type != 'release'
    needs: ['build']
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: './artifacts/'

      - name: Create Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Development Release'
          body: |
            Development release for commit ${{ github.sha }}
          files: |
            ./artifacts/Package/*.jar

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type == 'release'
    needs: ['build']
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: './artifacts/'

      - name: Read version from Gradle
        id: read_version
        run: |
          VERSION=$(./gradlew -q printVersion) # requires a "printVersion" task in build.gradle
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get previous release tag
        id: prev_release
        run: |
          PREV_TAG=$(gh release list --exclude-pre-releases --limit 1 --json tagName --jq '.[0].tagName')
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          if [ -n "${{ env.PREV_TAG }}" ]; then
            LOG=$(git log ${{ env.PREV_TAG }}..HEAD --pretty=format:"- %s (%h)")
          else
            LOG=$(git log --pretty=format:"- %s (%h)")
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: |
            ${{ env.CHANGELOG }}
          draft: true
          files: |
            ./artifacts/Package/*.jar
